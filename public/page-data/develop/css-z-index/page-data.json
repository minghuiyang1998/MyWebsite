{"componentChunkName":"component---src-templates-md-article-jsx","path":"/develop/css-z-index","result":{"data":{"markdownRemark":{"html":"","frontmatter":{"id":10036,"type":"develop","title":"理解为什么z-index不应该超过2","author":"jasmine","digest":null,"create_date":"Sat May 18 2019 12:05:55 GMT+0800 (CST)","update_date":"Sat May 18 2019 12:05:55 GMT+0800 (CST)","reading_time":"6 MIN READ","timestamp":1558152355673,"path":"/develop/css-z-index","image":"http://blog.minghuiyang1998.com/css-z-index.jpg","tags":[],"palette":{"Vibrant":[81.96428571428571,100.17857142857142,173.0357142857143],"DarkVibrant":[36,44,76],"LightVibrant":[252,236,224],"Muted":[110,106,145],"DarkMuted":[30,40,61],"LightMuted":[216,172,172]}}}},"pageContext":{"prev":{"html":"<blockquote>\n<p>​\t 一个比较偶然而幸运的机会进入了阅文，结束实习已经过去了快三个月的时间。在阅文实习的期间认识了一群超nice的人。真的学到了很多东西，比一些具体的技术更重要的是，对于日后前端的学习我有了一些思路和想法而不再盲目。这篇文章记录的是一些我认为提高了我开发和学习效率的东西，或着对我挺启发的一些杂思杂记。（思路比较散讲的东西也真的真的很基础，来自于我每天记在备忘录中的日小结这篇文章就是经过了一段时间的学习留下的一些零碎的想法，大部分是实习后的感悟和收获。）</p>\n</blockquote>\n<p>[TOC]</p>\n<h4>1. 信仰网站</h4>\n<p>​\t所谓信仰网站就是当你不知道如何去实现一个功能的时候，以这个网站的实现为参考。GitHub就是我的信仰网站，当然也可以是知乎，是Facebook等等的网站。比如说浏览器的form表单只支持GET和POST，当你需要PUT，DELETE如何实现，是拦截然后用ajax发送，还是在表单中添加_method字段，又比如研究一下csrf攻击的防范，可以看看Github的方式。</p>\n<p>​\t当然没事也要多看看，关注一下Github的交互和设计，比如说当要删掉一个仓库这种危险的操作他会让你输入全称而不是一个confirm等等。在练习布局的时候copy了Github的个人首页，然后发现新版的GitHub用了大量的atomic的方式，可能这就是一个趋势（详情可见GitHub的Primer），然后知道了下拉菜单其实用::before，::after就可以不要js代码实现点击其他任何的地方就把菜单收起来的功能。还有比如说项目页面的star，unstar按钮用了一个float，这里用这个属性就用的很恰当，然后就发现自己写的是真的很冗余也很不好😂</p>\n<p>​\t<img src=\"http://blog.minghuiyang1998.com/20190626110039.png\"></p>\n<p>​\t</p>\n<p>​\t然后我现在慢慢看到好看的，有意思的效果也会去研究一下实现，变成了一个习惯挺好的：）</p>\n<h4>2. 规范与习惯</h4>\n<p>​\t“总的开发时间不仅是开发时的时间还包括后期维护的时间，总的效率高了才是真的效率高了”</p>\n<p>​\t代码规范，项目规范，团队规范真的还挺重要的。代码规范比如airbnb还有Google的都挺好的，不是说每一条都严格遵守记下来，但是有意识的去遵守记下来的那几个慢慢就会养成习惯，良好的格式，良好的命名不仅仅会节省自己coding的时候瞎起名的时间，还会节省自己看代码的时间或者其他小伙伴后期接入的维护成本。</p>\n<p>​\t使用一些工具帮助实现规范，Eslint真的是很严格的，刚开始用完全没法写代码，所以感觉当时组里一直在推类似的代码规范，但是真的很难落实，但是限制规范是真的还挺重要的。虽然在实习期间我做了个不太成功的分享关于prettier的分享，但是prettier可以设置commit hook，跟Eslint这么多的配置与限制不一样，只是格式上的限制，可以先用prettier再慢慢过渡到Eslint。</p>\n<p>​\t好的习惯比如说要及时处理异常，这样debug会比较节省时间，自己开发的时候应该先数据后布局最后样式，整体感会比较好也一气呵成也比较节省时间，还有比如说ifelse最好配套使用，避免漏掉什么情况等等。</p>\n<h4>3. 对于框架的了解</h4>\n<p>​\tmentor曾经给了我一个任务去熟悉nodejs，用nodejs搭建一个类似博客的服务。在vue ，react流行之下，express这种服务端直出的框架都已经用的很少了，为什么要用纯nodejs写一个服务？但是写完会发现这还是有意义的，倒不是说我完成了一个node.js的API的发掘工作😂，当我学会去用nodejs匹配uri，实现上传文件等等功能，然后切换成express重构我就理解express到底帮我做了什么繁重的业务无关的工作，框架用起来也更得心应手，这可能跟为什么要去看看vue的源码是一个道理。做完这事对于一些比如说MVC，MVVM到底是什么含义，拿到一个项目应该如何选型都有了一点想法。去思考工具解决了什么问题，找到适用场景，根据需求正确的选型才能发挥最佳的效果，而不应该是盲目跟风一股脑使用或者不用什么。比如说之前的jQuery到最近的Vue， React等等前端框架，又比如说异步解决的方案的选择。</p>\n<h4>4. 学会看文档和关键词查询</h4>\n<p>​\t这两种技能都很重要，我看Echart的文档和微信小程序的文档的时候就很慢，就妄想一次记住这些东西，其实肯定是记不住的，就快速过一遍留一个印象，然后用的时候能够以最快的速度找到问题的解决方案就好。​关键词查询也是，搜索的时候有keyword就好，刚开始我也真的是整行问题敲进去...这就包含了很多无用的信息。这两个都适合效率有关的问题，coding效率真的很重要。</p>\n<h4>5. 规划时间排优先级</h4>\n<p>​\t这可能不是只一个开发相关的问题了，但是这个问题我是真实的焦虑过，怕自己一天不写代码就不会写了，一天不看到点什么成果就心慌，于是一天十几个小时就写代码看专业书，但是效率也不高效果也不好，再喜欢的是景这样久都很难持续。</p>\n<p>​\t重要紧急，重要不紧急，如何合理的安排需求和自我学习的时间很重要。其实人是很难十几个小时都集中一件事的。有些事情重要不紧急但是也一定要抽出时间来做，因为不做日后一定会变成紧急的事情，比如运动，比如自我开发开发。有些东西看似跟开发没什么关系，但是也可以学一学开拓开拓眼界，提升提升自己也许以后就用上了。</p>\n<p>​\t主要学软件，但是我也要学好英语还可以学学日语。做前端开发，但是有机会跟设计师姐姐学一下C4D，学一些sketch的使用也要把握一下机会。这个学期就发现3D建模对于理解threejs，webGL还是有帮助的。页面的实现方式是很多的，但是由于平台支持的不同有时候，一个实现方式不行又要换另一个实现方式，又要重新切图，这时候学会自己切图就很重要了设计师也是很忙的，等待的时候一来二去就delay了😂。</p>\n<p>​\t</p>\n<h4>6. 系统的看书</h4>\n<p>​\t我刚开始就是感兴趣然后通过网上的各式教程学习的，其实不太好首先是网上的东西质量参差不齐（很棒的很值得看的jstutorial，阮老师的ES6入门等等），其次是其实像菜鸟教程之类的教程就很简略就是API无法引起思考啊😂。不知道学技术的是不是都会日渐变得戾气很重hhh，看书能静心而且可以帮助自己连成知识网络，不会越学越乱。</p>\n<h4>7.多思考多问多看优质代码</h4>\n<p>​\t学的时候要多问多看，看看优质代码比自己闷头写一大串学到的更多。能不能实现固然重要，但是如何实现更重要，经验的东西会让你少走很多弯路。至于优质的代码，如果组里有前辈或大神那再好不过，多问问题真的很占便宜！！！没有也没关系，GitHub上有：）。</p>\n<h4>8.重视基础课的学习</h4>\n<p>​\t js和css和html还有大学专业基础课一定要好好学。大部分的学校都没有前端的课程，非要说扯得上关系的就是web课的老师一节课讲完了js和php😂。周围的很多同学也是用用vue全家桶做做学校的项目，我刚开始就是这样的，只要熟悉模版语言似乎不用过于熟悉js也能写，但是慢慢就会发现瓶颈很多bug不明所以，究其原因就是对于更低层一些的语言特性，原理不熟悉。其他的计算机网络，算法，数据结构，数据库，操作系统等等一些课程就不用说了和开发紧密相关，虽然不同语言不太一样，但是都是地基。</p>\n<h4>9.用工具提升效率</h4>\n<p>​\t最明显的感受就是学会了用vim开发，虽不是说推荐每个人都用因为学习这个真的是有成本的，刚开始连代码都敲不顺了，但是最后学会了，感觉效率提升了写代码的时候还是很开心的：）。还有一些工具比如最基本的sourcetree，swithHost...还有一些编辑器的有趣的插件比如说log的插件，todo标签的插件，chrome的插件都可以给开发增加乐趣和提升效率。</p>\n<h4>10. 学会做小结</h4>\n<p>​\t我不太输出也不太会写文章，所以小结反馈分享这一点是真的做得不是特别好。我接触前端的时间也不长，很多知识都是不断的推倒重建，我不知道我脑子里觉得有意义的东西是否值得写成文章，或者说我讲的东西是否值得拿出来分享，分享的东西是不是讲的有根本性的错误，还有讲的到底好不好，一系列的顾虑导致我这方面一直做的不好，所以逼迫自己走出舒适区才有了现在这几篇文章。强迫自己去输出，不管对不对好不好，输出的过程中相当于把自己的脑子捋顺了一遍。开发的知识是很琐碎的，脑子的内存也是很有限的，只有能区分开又能连在一起才是真的理解了。</p>","frontmatter":{"path":"/develop/frontend-develop-jottings"}},"next":{"html":"<h2>写在前面</h2>\n<p>​\t“你认为学校学到的专业课知识有用吗？”，我以前从来不认为学校学到的东西有用，计算机组成原理计算机系统结构操作系统都好浪费时间，考试就背背书，但当我逐渐去深入了解一些前端该了解的知识的时候，我觉得还是很有用的，如果你是个计算机或者软件相关专业的学生，你一定要好好学习基础专业课。</p>\n<p>​\t我了解到浏览器工作原理看的是<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\">这篇文章</a>，知乎和掘金上都有相关文章，我写这篇文章的目的是督促我整理一下所学，尝试把我看完这篇文章以后所认识到的浏览器工作原理学校的操作系统课程的进程线程的知识串一下，毕竟知识那么零碎= =，不去复习思考和整合永远都不知道有用。</p>\n<h2>一些概念</h2>\n<p><strong>进程</strong>：</p>\n<ul>\n<li>程序的执行，由程序和数据两部分组成</li>\n<li>资源分配的最小单位，</li>\n<li>可以创建其他进程，所以一个程序可以是多进程的</li>\n</ul>\n<p><strong>线程：</strong></p>\n<ul>\n<li>调度的最小单位，不拥有资源读取所在进程的内存和其他资源</li>\n<li>引入的原因是共享环境，环境切换代价小于进程，线程的出现是为了挖掘进程内部的并发度，提高并发度的好处在于短时间内可以有更多的事情被处理</li>\n</ul>\n<p><strong>CPU调度</strong>：</p>\n<ul>\n<li>调度程序从内存中就绪可执行的进程里选择一个，并分配cpu（进程调度的算法和进程的几个状态这里就不赘述啦）</li>\n</ul>\n<p><strong>GPU：</strong></p>\n<ul>\n<li>多用于图形处理，用于快速渲染与平滑交互</li>\n</ul>\n<p><strong>并发：</strong></p>\n<ul>\n<li>假装并行，当单核cpu运行时一次只能执行一个进程，并发切换一个进程只能执行一小段时间，让用户感觉很多事情在同时进行</li>\n</ul>\n<h2>浏览器的架构</h2>\n<p>​\t浏览器的架构可能是一个具有多个线程的独立进程，或者存在多个进程但是只有部分进程之间会进行 IPC 通信的结构。本文主要讲的是chrome他是多进程架构的。主要的进程有：</p>\n<ul>\n<li>browser进程：包含UI线程，Network线程，主要处理浏览器图形界面，和网络访问等，我的理解是是一个控制进程</li>\n<li>render进程：每开一个tab都是一个新进程，主要处理这个tab的页面渲染</li>\n<li>\n<p>GPU进程：绘制进程</p>\n<p>…(其他的待我后面了解一下再写上来，因为不了解还是不要随便说了：)</p>\n</li>\n</ul>\n<p><strong>为什么用多进程架构？</strong>: </p>\n<p>​        主要应该是安全问题。概念里面提到进程之间是并发执行的，进程之间是相互独立的，如果某一个tab没有响应，CPU切换到其他进程去执行不会有影响，即一个tab crash了其他还能正常工作。如果采用的是单进程多线程的模式公共的进程出现了问题，所有的页面都会受到影响。</p>\n<h2>chrome的一些special的点</h2>\n<ul>\n<li><strong>渲染进程独立</strong>：每个tab和iframe的渲染进程都是独立的，每个进程自己的私有内存空间（不禁联想到微信小程序的架构），所以能打开的tab数量是有限制的，限制会根据设备的内存和 CPU 功率动态调整，但当 Chrome 达到限制时，它会在一个新的进程中打开这个站点。</li>\n<li><strong>服务化</strong>：在强大的硬件上运行的时候，会细化进程，比如可能会把browser进程中的network线程，UI线程，storage线程都拆为单独的进程，从而提高稳定性，如果唯一资源约束的设备上会整合到一个进程中，从而节省内存占用</li>\n</ul>\n<h2>进程间的通信</h2>\n<p>浏览器中的进程通信包括</p>\n<ul>\n<li>network处理render进程的网络请求</li>\n<li>network在请求数据之前查找render的worker进程（service worker），没有缓存才会开始网络请求</li>\n<li>render将raste后的帧传递给GPU进程进行渲染</li>\n<li>......</li>\n</ul>\n<p>进程通信的方式有:</p>\n<ul>\n<li>共享存储区（内存的用户区，进程在创建的时候先找到可用内存建立PCB（系统区），再创建其他部分（用户区））</li>\n<li>管道</li>\n<li>\n<p>消息缓冲</p>\n<p>......</p>\n</li>\n</ul>\n<h2>小结</h2>\n<p>​\t虽然不去了解这些东西，还是可以做好开发，毕竟高级的抽象屏蔽了底层的操作，但是去理解一下这些原理的东西，写代码的时候会有更得心应手恍然大悟的感觉不是吗：）</p>","frontmatter":{"path":"/develop/browser-OS"}}}},"staticQueryHashes":[]}