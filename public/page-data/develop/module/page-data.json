{"componentChunkName":"component---src-templates-md-article-jsx","path":"/develop/module","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p> \t故事的开始是实习的导师问我认不认识echarts修改样式的customed.js文件开始的12行代码（tips：本文会出现大量代码用以描述我整理我所记录的js module的演化过程），笔记其实已经是很长时间之前的了，所以今天才来整理花了不少时间才看明白= =</p>\n</blockquote>\n<p>👇echarts修改样式的customed.js文件开始的12行代码：</p>\n<pre><code class=\"language-js\">(function(root, factory) {\n  if (typeof define === \"function\" &#x26;&#x26; define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"exports\", \"echarts\"], factory);\n  } else if (typeof exports === \"object\" &#x26;&#x26; typeof exports.nodeName !== \"string\") {\n    // CommonJS\n    factory(exports, require(\"echarts\"));\n  } else {\n    // Browser globals\n    factory({}, root.echarts);\n  }\n})(this, function(exports, echarts) {\n  var log = function(msg) {\n    if (typeof console !== \"undefined\") {\n      console &#x26;&#x26; console.error &#x26;&#x26; console.error(msg);\n    }\n  };\n  if (!echarts) {\n    log(\"ECharts is not Loaded\");\n    return;\n  }\n  echarts.registerTheme(\"customed\", {\n      // 这里删去了n行 \n  });\n});\n</code></pre>\n<p>​\t</p>\n<p>​\t在这段代码里面用到了UMD，js代码模块化的方式，使得这段代码既可以用于服务端又可以用于浏览器，同时也避免了污染全局变量。</p>\n<ul>\n<li>先判断是否支持AMD</li>\n<li>再判断是否支持CommonJs</li>\n<li>前两个都不存在公开到全局</li>\n</ul>\n<h1>在js代码里避免污染全局变量的方法</h1>\n<ul>\n<li>\n<p>闭包 + 立即执行</p>\n<pre><code class=\"language-js\">(function(){  \n    var page\n    function book(){\n      page = page + 1\n    }\n})()\n</code></pre>\n</li>\n<li>\n<p>命名空间（创建一个对象为他添加方法）调用函数或更改变量值，你总是需要通过主对象的名称将整个事物包装在匿名函数中并以这种方式保护范围</p>\n<pre><code class=\"language-js\">var main = {}\nmain.book = function(){}\nmain.page = 3;\n\nvar main = {\n  book:function(){},\n  \n}\n</code></pre>\n</li>\n<li>使用let，const（也是代码规范中的推荐做法）</li>\n<li>\n<p>模块化</p>\n<ul>\n<li>拆分大文件， 避免单文件内容过多过于臃肿</li>\n<li>便于支持组件化，单文件功能更独立，模块内外分离</li>\n<li>避免变量污染全局，解决命名冲突</li>\n</ul>\n</li>\n</ul>\n<h1>js模块化解决方案</h1>\n<p>​\t“历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。”  —— <a href=\"https://es6.ruanyifeng.com/#docs/module\">阮一峰ES6入门</a></p>\n<h3>js实现简单的同步异步模块化机制</h3>\n<ul>\n<li>同步</li>\n</ul>\n<pre><code></code></pre>\n<ul>\n<li>异步</li>\n</ul>\n<pre><code></code></pre>\n<h3>常见js模块化方案</h3>\n<ul>\n<li>\n<p>服务端</p>\n<ul>\n<li>nodejs使用CommonJS的解决方案（exports/require）实现模块加载（如果使用babel也可以使用import，export default的方式）</li>\n</ul>\n</li>\n<li>\n<p>客户端</p>\n<ul>\n<li>页面直出使用模版渲染 —— （将拆分出来的文件使用<script>或<link>标签的形式引入）</li>\n<li>客户端渲染SPA —— 使用webpack进行打包（使用import，export default）</li>\n</ul>\n<p>（使用webpack会只需要在解析完空白html后请求一次将打包好的bundle.js文件返回，而使用<script>与<link>则是每个标签都会进行请求）</p>\n</li>\n</ul>\n<h3>CommonJS AMD CMD UMD</h3>\n<ul>\n<li>commonJS (nodejs)：同步  用<code>module.exports</code>定义当前模块对外输出的接口（不推荐直接用<code>exports</code>），用<code>require</code>加载模块。</li>\n<li>AMD（异步）:所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。首先需要引入require.js文件和一个入口文件main.js。main.js中配置<code>require.config()</code>并规定项目中用到的基础模块。</li>\n<li>CMD和sea.js：CMD是另一种js模块化方案，它与AMD很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。</li>\n<li>ES6 Module export{} import ：</li>\n</ul>\n<h3>webpack（现代前端模块打包工具）</h3>\n<p>​\t由于前端页面有着越来越重的交互需求，以Vue，React为代表的组件化的开发方式离不开模块打包工具</p>\n<p>以webpack为例：</p>\n<ul>\n<li>打包工具做了什么？</li>\n<li>为什么spa页面尤其需要打包工具？</li>\n<li>打包工具会带来什么问题？</li>\n<li>webpack与gulp？</li>\n</ul>","frontmatter":{"id":10026,"type":"develop","title":"js模块化","author":"jasmine","digest":"故事的开始是实习的导师问我认不认识echarts修改样式的customed.js文件开始的12行代码...","create_date":"Tue May 03 2019 10:30:48 GMT+0800 (CST)","update_date":"Tue May 03 2019 10:30:48 GMT+0800 (CST)","reading_time":"8 MIN READ","timestamp":1557196248971,"path":"/develop/module","image":"http://blog.minghuiyang1998.com/module.jpg","tags":[],"palette":{"Vibrant":[242,218,43],"DarkVibrant":[114,51,20],"LightVibrant":[251,235,120],"Muted":[144.15999999999997,127.84000000000002,8.840000000000018],"DarkMuted":[130.1641791044776,58.23134328358209,22.835820895522396],"LightMuted":[148.59712230215825,130.98561151079136,4.402877697841739]}}}},"pageContext":{"prev":{"html":"","frontmatter":{"path":"/develop/oauth-login"}},"next":{"html":"","frontmatter":{"path":"/travel/New-Zealand-3"}}}},"staticQueryHashes":[]}