{"data":{"markdownRemark":{"html":"","frontmatter":{"id":10034,"type":"develop","title":"从输入url到显示页面","author":"jasmine","digest":"从输入url到显示出页面发生了什么，会涉及到浏览器的进程控制，缓存的查找，DNS解析，网络请求的过程，返回html浏览器的解析过程, js引擎对对代码解析执行过程（这个部分还有spa的解析过程的不同, 但这部分应该会放到web渲染方式的初步了解这一部分），这是很长的一系列知识点，是的我又来串知识点了：）","create_date":"Sat Apr 13 2019 09:36:35 GMT+0800 (CST)","update_date":"Sat Apr 13 2019 09:36:35 GMT+0800 (CST)","reading_time":"6 MIN READ","timestamp":1555119395000,"path":"/develop/render","image":"http://blog.minghuiyang1998.com/render.jpg","tags":["cache","browser"],"palette":{"Vibrant":[67,153,185],"DarkVibrant":[11,85,81],"LightVibrant":[157.6547619047619,202.90714285714282,219.74523809523808],"Muted":[55,101,109],"DarkMuted":[42,84,91],"LightMuted":[196,220,212]}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<blockquote>\n<p>最近很着急的把脑子里的东西小结出来，因为最近学校事情比较多，写代码写的比较少。这篇文章同样从一道题出发，这道题来自于我今年参加的一次微信的笔试，但是写的不是太好还花了很多时间，反思了一下不是很难的题目，终归是基础不够好，还要多加学习。这篇文章就从题目出发，反思一下js的异步处理的一些方法。</p>\n</blockquote>\n<h1>题目</h1>\n<p>​\t大概是写一个测试函数，输入是总共执行的次数和每次发送的请求数目和请求url，比如输入3，4就是发送4个请求一共发送3次，然后记录每次请求到获得返回的时间，最后求平均值返回。</p>\n<h1>思考</h1>\n<ol>\n<li>\n<p>js的异步编程有几种解决方案？</p>\n<ul>\n<li>callback</li>\n<li>promise</li>\n<li>await/async</li>\n</ul>\n</li>\n<li>\n<p>这三种方式的区别</p>\n<ul>\n<li>错误捕获的方式</li>\n<li>常用的场景</li>\n</ul>\n</li>\n</ol>\n<p>​\t这道题存在一个串行异步和一个并行异步的，我当时直接就只考虑用promise写，因为日常开发没怎么用过async/await，但是用promise写就会写的很长，因为要处理串行异步就会存在一个递归。async/await虽然是promise的语法糖，但是学习一下就会发现对于题目这种用法async/await明显会更合适。</p>\n<p>​\t</p>\n<ol>\n<li>async/await 与 promise的关系？</li>\n</ol>\n<p>async/await 本质上还是promise，是promise和generator的语法糖（<a href=\"https://es6.ruanyifeng.com/#docs/async\">详情可见阮一峰老师的ES6入门</a>）</p>\n<pre><code class=\"language-js\">async function f3() {\n  /* 1. 这个函数里面的内容会被包成一个promise，\n  相当于在这里面写了一个return new Promise((resolve, reject) => {})，\n  然后这个Promise的里面又有一个Generator函数用于控制函数自动执行，\n  通过递归调用step函数，顺序执行每一行，如果是异步操作就等待resolve再执行下一行*/\n    \n  try {\n  /* 2. await 后面跟着一个promise, 而await下面的部分会被包成Promise.resolve()\n     相当于在这里写了一个 var z = Promise.resolve(data);  z.then((data)=>{\n      // 这里是await后面的代码\n     })\n  */\n    var z = await Promise.resolve(30);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nf3();\n</code></pre>\n<p><strong>了解了这些以后我重写了一下这道题目的代码</strong> (这里省去了关于计算平均数的代码以便更清晰的展示思路)</p>\n<ol start=\"2\">\n<li>那么这道题用promise + 递归 写就会是下面这个样子（面试的时候我就是这样写的..)</li>\n</ol>\n<pre><code class=\"language-js\">let allData = []\nfunction send(times, counts, url) {\n    return new Promise((resolve, reject)=>{\n        _sendConcurrentRequest(counts, url).then((data) => {\n            allData.push(data)\n            if (times) {\n                send(times - 1, counts, url) // 递归调用\n            } else {\n                // 计算平均数\n                resolve(avarage)\n            } \n        }).catch(e => reject(e))  \n    })\n}\n\nfunction _sendConcurrentRequest(counts, url) {\n    return new Promise((resolve, reject) => {\n        let tempList = [], _counts = counts\n         while (_counts) {\n            return new Promise((resolve, reject) => {\n                tempList.push(_sendRequest(url))\n                _counts --\n            })\n        }\n        Promise.all(tempList).then((data) => {\n            resolve(data)\n        }).catch(e => reject(e))\n    })\n}\n\n function _sendRequest(url) {\n    return new Promise((resolve, reject) => {\n      let start = Date.now()\n      // 模拟延时\n      setTimeout(() => {\n        let stop = Date.now()\n        resolve(stop - start)\n      }, 2000)\n    })\n  }\n</code></pre>\n<ol start=\"3\">\n<li>改为使用await + 递归</li>\n</ol>\n<pre><code class=\"language-js\">let allData = []\nasync function send(times, counts, url) {\n    let data = await _sendConcurrentRequest(counts, url)\n    allData.push(data)\n    \n    if (times) {\n         await send(times - 1, counts, url)\n    } else {\n         return avarage\n    }\n}\n\n// 后面的两个函数没有变化仍是用Promise.all处理并行请求\n</code></pre>\n<ol start=\"4\">\n<li>将使用await的情况由递归变为循环，promise无法改写为循环的情况</li>\n</ol>\n<pre><code class=\"language-js\">let allData = []\nasync function send(times, counts, url) {\n    while(times) {\n         let data = await _sendConcurrentRequest(counts, url)\n         allData.push(data)\n         times--\n    }\n    return avarage\n}\n</code></pre>\n<blockquote>\n<p>然后就会发现最后一种async/await+循环比第一种更便于理解语义清晰了无数倍：）</p>\n</blockquote>\n<h1>总结</h1>\n<p>​\t为了解决callback hell出现了promise，用then使异步任务的执行更清晰明了的。Promise 的存在问题是代码冗余，不管什么操作后任务都得用Promise 起来带上resolve，reject。例如两个串行的异步操作中间必须有一个同步操作，那么为了能够链式回调，中间的同步操作也得用promise包起来，然后才能then链式调用。而且新接入的同学为了把代码看懂需要去找到这个函数声明的地方，原来的语义就不那么直观了。后来​为了解决串行的异步出现async/await，真正使异步操作能够像同步代码一样去写。</p>\n<p>​\t每种方法都有自己的用处，不存在绝对的好与坏，实习之初导师建议我能用callback直接处理就用callback处理，类似于（返回数据处理不复杂的情况下）两个串联的请求也没必要用promise包起来，两个回调嵌套使用就好了，使用promise反而会使的语义很不清晰。</p>\n<p>​\t除此之使用异步编程最应该注意的问题就是为了后期能够快速定位错误，一定要注意异常捕获。</p>","frontmatter":{"path":"/develop/promise-await-async"}},"next":{"html":"<blockquote>\n<p>​\t开始做博客有段时间了，虽然进度很慢（学校作业很多）还是总结一下我思考的过程，希望以后别人问到我为什么这么选型，我还能给自己一个回答。这遍文章是围绕我blog选型展开的，但是会同时串一下自己对浏览器渲染方式的认识，还有对之前做的项目的一些选型的小理解，还是更像是记录而不是正统的分享文章叭。</p>\n<p>​\tblog 首先考虑到的就是良好的SEO，那么直接使用SPA类似于Vue全家桶和React就不太ok了，后面可能也会想要插入一些强交互的一些小想法的实现，那么为什么没选用Nuxt呢？但是在了解了Nuxt的渲染方式，又想熟悉一下react框架加上体验一下gatsby中的GraphQL，再加上其实可以通过跳转到另一个web服务来实现插入其他想法的方式，最终还是选择了静态网页生成Gatsby（这篇文章并不会详述我去熟悉这个新框架的过程，也许第二次总结blog开发的时候会写叭）</p>\n</blockquote>\n<h1>渲染方式选择基准</h1>\n<h2>性能</h2>\n<ul>\n<li>浏览器发出资源请求到接受到资源第一个字节的时间</li>\n<li>页面打开到页面主要内容可见的时间。</li>\n<li>页面打开到变得可以交互的时间。</li>\n</ul>\n<p>（ps：web performance API有很多关于从请求到返回渲染显示整个过程的信息，但是这篇文章感觉只会涉及到这三个）</p>\n<h2>SEO</h2>\n<p>​\t什么时候需要去考虑SEO呢？按照我的理解是如果网站本身就是需要登录强调客态的网站，那其实不用考虑，但对于一些网站首页，blog在选择在渲染方案，通常会考虑SEO。通常会选择服务器渲染来应对爬虫，这样爬虫拿到的首页html就是带有信息的而不是一个白屏，良好的SEO通常还会有更多的考虑比如语义化的标签，一些额外的信息等等，也会有一些网页禁止你去爬（比如利用robort.txt，微信公众号文章的内容就是不可爬的，SEO我并不是了解的特别深，了解了会再来补充！）</p>\n<h1>渲染方式</h1>\n<h3>SSR</h3>\n<ul>\n<li>rails，express，koa</li>\n</ul>\n<p>​\t服务器端渲染，我比较熟悉的是Express + ejs模版。虽然服务端框架加上模版渲染的方式已经跟当下比较流行的用框架 + webpack组装渲染页面， 服务端只提供数据的web app方式有一定差距了，但是还是有优点在的，比如天然的SEO，首屏速度。</p>\n<p>​\t值得一提的是我去实习的时候也使用过将Vue和React作为库引入使用，管理存在复杂状态管理的部分作为交互增强的开发方式。毕竟尤大大也说了“ 用 Vue 不代表你一定要做成 SPA。现在有些人提起 Vue 就好像一定要 CLI 全家桶，其实 Vue 从一开始就一直很注重对后端渲染的应用做渐进增强的用例，现在欧美也有很多的开发者拿 Vue 直接替代 jQuery 做常见的交互增强。对于真正适合做成 SPA 的应用，SEO 反而通常不是问题。你针对 marketing 的页面应该是静态分开部署的，app 本身则要登陆才能用，SEO 没有什么意义。少数既需要 SPA 强交互性，又对 SEO 和首屏速度有刚性需求的场景，这时候同构 SSR 就派上用场了。“<a href=\"https://www.zhihu.com/question/51949678/answer/146656850\">知乎</a></p>\n<h3>CSR</h3>\n<p>​\t客户端渲染。SPA应用如Vue，React，缺点是SEO（可以使用对应的框架和解决办法解决，但肯定需要额外的工作量跟ssr不同）和首屏速度（因为SPA的渲染方式比如Vue从取得index.html,  取得js到开始生命周期，最终挂载到节点显示出页面这段时间是肯定会存在的），优点是</p>\n<ul>\n<li>便于状态管理强交互，避免耗性能的DOM操作</li>\n<li>无缝切换，前端路由，单页应用</li>\n<li>良好的封装，优秀的开发速度</li>\n</ul>\n<h3>Prerendering（静态网页生成）</h3>\n<ul>\n<li>\n<p>在构建时生成静态HTML和页面的初始状态。比如Gatsby，Vuepress，Next.js的static export</p>\n</li>\n<li>\n<p>将页面中不会变化的内容直接渲染成出来，然后装到HTML中去。在浏览器端需要执行的js有限的假设下，该方法能够提高页面内容可见与可交互的速度。它能提供比服务器端渲染更快的速度，因为不需要生成HTML。还支持SPA，平台部署比如GitHub page，良好seo</p>\n</li>\n<li>\n<p>静态化渲染需要为每个URL生成单独的HTML，这是它的一个缺点。如果您无法提前预测这些URL的内容，或者或一个网站存在大量的URL，静态化渲染可能是不合适的。</p>\n</li>\n</ul>\n<h3>Rehydration（同构）</h3>\n<ul>\n<li>\n<p>比如Nuxt就是一个支持同构的框架。在服务器端渲染的dom树和数据的基础上，浏览器端利用JavaScript再次渲染。<code>asyncData</code>方法是在组件 <strong>初始化</strong> 前被调用的，所以在方法内是没有办法通过 <code>this</code> 来引用组件的实例对象。然后会合到data里面去</p>\n</li>\n</ul>\n<p>  <strong>Nuxt.js 的渲染流程</strong>（<a href=\"https://zhuanlan.zhihu.com/p/30393592\">参考</a>）</p>\n<p>  Nuxt.js 通过一系列构建于 Vue.js 之上的方法进行服务端渲染，具体流程如下:</p>\n<ol>\n<li>\n<p>调用 nuxtServerInit 方法当收到请求时，最先调用的即是 nuxtServerInit 方法，可以通过这个方法预先将服务器的数据保存，如已登录的用户信息等。另外，这个方法中也可以执行异步操作，并等待数据解析后返回。</p>\n</li>\n<li>\n<p>Middleware 层经过第一步后，请求会进入 Middleware 层，在该层中有三步操作：</p>\n</li>\n<li>\n<p>读取 nuxt.config.js 中全局 middleware 字段的配置，并调用相应的中间件方法</p>\n</li>\n<li>\n<p>匹配并加载与请求相对应的 layout</p>\n</li>\n<li>\n<p>调用 layout 和 page 的中间件方法</p>\n</li>\n<li>\n<p>调用 validate 方法在这一步可以对请求参数进行校验，或是对第一步中服务器下发的数据进行校验，如果校验失败，将抛出 404 页面。</p>\n</li>\n<li>\n<p>调用 fetch 及 asyncData 方法这两个方法都会在组件加载之前被调用，它们的职责各有不同，asyncData 用来异步的进行组件数据的初始化工作，而 fetch 方法偏重于异步获取数据后修改 Vuex 中的状态。</p>\n</li>\n<li>\n<p>在 Nuxt.js 的源码 util.js 中可以看到以下方法：</p>\n<pre><code class=\"language-js\">export function applyAsyncData (Component, asyncData = {}) {\n  const ComponentData = Component.options.data || noopData\n  Component.options.data = function () {\n    const data = ComponentData.call(this)\n    return { ...data, ...asyncData }\n  }\n  if (Component._Ctor &#x26;&#x26; Component._Ctor.options) {\n    Component._Ctor.options.data = Component.options.data\n  }\n}\n</code></pre>\n<p>这个方法会在 asyncData 方法调用完毕后进行调用，可以看到，组件从 asyncData 方法中获取的数据会和组件原生的 data 方法获取的数据做一次合并，最终仍然会在 data 方法中返回，所以得出，asyncData 方法其实是原生 data 方法的扩展。</p>\n<p>经过以上四步后，接下来就是渲染组件的工作了</p>\n</li>\n</ol>\n<p>  （在 .nuxt 目录下，你可以找到 server.js 文件，这个文件封装了 Nuxt.js 在服务端渲染的逻辑，包括一个完整的 Promise 对象的链式调用，从而完成上面描述的整个服务端渲染的步骤）</p>\n<ul>\n<li>页面导航导致跳转或刷新时，服务器会输出页面的HTML文档，并把该页面所需要的javascript和（用于渲染的）数据内联到文档一起输出。如果实现得当，这种方式可以像服务端渲染那样实现较快的首次内容绘制，之后客户端会通过一种叫rehydration的技术继续（在客户端）渲染</li>\n</ul>\n<ul>\n<li>\n<p>主要问题在于（<a href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\">参考</a>）：</p>\n<ul>\n<li>它会对可交互时间有明显的负面影响：尽管它缩短了首次绘制时间。服务端渲染的页面往往让人感觉已经加载完毕并可以开始交互了，但实际上只有等到客户端的js脚本执行并完成DOM事件绑定才能响应用户的交互（例如用户的输入行为）。在一些手机终端，这个过程会耗费几秒甚至几分钟的时间。也许你自己也经历过这样的场景：一个页面看起来已经加载完成了，但是在页面执行点击或者轻触的动作，结果却什么也没发生。这很快变得令人沮丧……“为什么(页面)没有反应？为什么我不能滚动？”</li>\n<li>Rehydration的问题不止于此，通常比因js导致的交互延迟更糟糕。为了让客户端js能够准确地渲染，而不用重新向服务器请求渲染所需的数据，目前服务端渲染通常会把UI所需的数据序列化并内联到HTML文档的script标签里。最终的HTML文档包含了更高层面的重复。从使用rehydration方案的一些真实网站搜集到的性能数据来看，该方案是极度不推荐的。究其原因，还是回到用户体验上：这种方式很容易让用户停留在“神秘的峡谷”之中，即界面可见但不可交互的状态</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>和传统ssr还是不一样的，没有绑定事件的，他是吧首屏先丢给客户端展示，然后再把剩下的js bundle下载绑定，所以能否在强行ssr的基础上，将bundle再细分为基础包和页面包，实现preload最小化业务js是提升性能的关键</li>\n</ul>\n<h1>小结 &#x26; Blog 的选型</h1>\n<p>​\t一个完美的解决方案通常服务端发送html跟最小的js来完成交互，基于上面的对几种方式的分析，没有解决方案是完美的，而是对需求的权衡。所以blog的选择Gatsby这个框架，不是因为它去年最热的静态页面生成框架，而是从几个方面SEO，良好的开发体验，文章内容的管理，用户看到页面的速度，尝试新技术几个方面综合考虑。我从入门前端使用过全家桶，传统的Express与模版渲染，静态网页生成，Nuxt慢慢能体会到从JQuery到Vue，React这些框架的意义，这对我来说无疑是在慢慢成长了～：D</p>","frontmatter":{"path":"/develop/browser-render-blog"}}}}