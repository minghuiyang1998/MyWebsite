{"data":{"markdownRemark":{"html":"<ul>\n<li>js内置的一些对数据结构处理的复杂度如flat</li>\n<li>\n<p>数组</p>\n<ul>\n<li>拍平数组</li>\n<li>找第n大的数</li>\n<li>背包问题</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h1>flat</h1>\n<ol>\n<li>reduce + recursive</li>\n<li></li>\n<li>ES6 flat</li>\n<li></li>\n</ol>","frontmatter":{"id":10024,"type":"develop","title":"努力培养算法思维","author":"jasmine","digest":"虽然我算法课成绩是优，但是我算法真的不强，因为不熟悉算法的思路在实际使用的时候真的会反应不过来，这篇文章总结一些我脑子里的算法思路","create_date":"Tue Apr 30 2019 11:24:18 GMT+0800 (CST)","update_date":"Tue Apr 30 2019 11:24:18 GMT+0800 (CST)","reading_time":"6 MIN READ","path":"/develop/algorithm","image":"http://blog.minghuiyang1998.com/algorithm.jpg","tags":["sort","search","flat"],"palette":{"Vibrant":[224,186,44],"DarkVibrant":[117,61,43],"LightVibrant":[220,196,171],"Muted":[160,137,93],"DarkMuted":[115,109,60],"LightMuted":[205,188,166]}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<blockquote>\n<p>​\tcss真的是很有趣和神奇的东西，如果足够熟悉所有的属性和使用场景，而不只是常用的那几个比如张老师，可以用优雅的代码创造很神奇的效果。刚入门如我刚开始学习css的时候，看了两本书《css权威指南》，张老师的《css世界》（这本其实还没看完，其实内容真的很好，但是更多的与实践相关，所以入门读起来可能真的会比较困难）关于样式最开始就是能实现就好，但是发现当页面越来越复杂，内容越来越多的时候样式不断叠加，内容越来越乱很难维护，自己写着写着就想重写全部了😂。这篇文章主要小结一个css小测和一些一段时间以来的小思考。</p>\n</blockquote>\n<h1>题目</h1>\n<p>实现一个类似于微信聊天界面的布局，兼容移动端即可（<a href=\"https://github.com/zhangxinxu/quiz/issues/16\">小测地址</a>）</p>\n<p><img src=\"http://blog.minghuiyang1998.com/css4.png\" alt=\"css4\"></p>\n<h1>思考</h1>\n<p>这个题目的关键点在于了解一下direction这个属性，我还学到了更多的东西，下面是经过我修改的代码：</p>\n<pre><code class=\"language-html\">&#x3C;head>\n  &#x3C;style>\n    body {\n      margin: 0;\n    }\n\n    p {\n      margin: 0;\n    }\n\n    html {\n      font-size: 16px;\n    }\n\n    @media screen and (min-width: 375px) {\n      html {\n        /* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */\n        font-size: calc(100% + 2 * (100vw - 375px) / 39);\n        font-size: calc(16px + 2 * (100vw - 375px) / 39);\n      }\n    }\n\n    @media screen and (min-width: 414px) {\n      html {\n        /* 414px-1000px每100像素宽字体增加1px(18px-22px) */\n        font-size: calc(112.5% + 4 * (100vw - 414px) / 586);\n        font-size: calc(18px + 4 * (100vw - 414px) / 586);\n      }\n    }\n\n    @media screen and (min-width: 600px) {\n      html {\n        /* 600px-1000px每100像素宽字体增加1px(20px-24px) */\n        font-size: calc(125% + 4 * (100vw - 600px) / 400);\n        font-size: calc(20px + 4 * (100vw - 600px) / 400);\n      }\n    }\n\n    @media screen and (min-width: 1000px) {\n      html {\n        /* 1000px往后是每100像素0.5px增加 */\n        font-size: calc(137.5% + 6 * (100vw - 1000px) / 1000);\n        font-size: calc(22px + 6 * (100vw - 1000px) / 1000);\n      }\n    }\n\n    .container {\n      padding: 0 1rem;\n    }\n\n    .chat-item {\n      display: flex;\n      padding: 0.625rem 0;\n    }\n\n    .chat-user {\n      color: #808080;\n      font-size: 1rem;\n      margin-bottom: 0.5rem;\n    }\n\n    .chat-name,\n    .chat-time {\n      display: inline-block;\n    }\n\n    .chat-avatar-wrap {\n      display: inline-block;\n    }\n\n    .chat-avatar {\n      border-radius: 50%;\n      width: 3.75rem;\n      height: 3.75rem;\n      margin-inline-end: 0.8rem;\n    }\n\n    .chat-text {\n      border-radius: 0.75rem;\n      position: relative;\n      padding: 0.75rem 0.625rem;\n\n      background-color: #eee;\n      border-color: #eee;\n      color: #3b3f47;\n    }\n\n    .chat-text p {\n      text-align: left;\n    }\n\n    .chat-text::before {\n      content: \"\";\n      display: inline-block;\n      position: absolute;\n      z-index: -1;\n      width: 2rem;\n      height: 1.2rem;\n      top: -0.1rem;\n      margin-inline-start: -3.2rem;\n      border-top-right-radius: 40% 50%;\n      border-top-left-radius: 40% 50%;\n      border-left: 0.6em solid;\n      border-right: 0.6em solid;\n      border-color: inherit;\n    }\n\n    [data-is-self].chat-item {\n      direction: rtl;\n    }\n\n    [data-is-self] .chat-text {\n      background-color: #00beff;\n      border-color: #00beff;\n      color: #ffffff;\n    }\n  &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n  &#x3C;div class=\"container\">\n    &#x3C;div class=\"chat-item\">\n      &#x3C;div class=\"chat-avatar-wrap\">\n        &#x3C;img class=\"chat-avatar\" src=\"\"/>\n      &#x3C;/div>\n      &#x3C;div class=\"chat-info\">\n        &#x3C;div class=\"chat-user\">\n          &#x3C;span class=\"chat-name\">提案笙&#x3C;/span>\n          &#x3C;span class=\"chat-time\">9月30日 21:47&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div class=\"chat-text\">\n          &#x3C;p>什么秘密，我觉得你现在跟我说什么都没有意义&#x3C;/p>\n        &#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n\n    &#x3C;div class=\"chat-item\" data-is-self>\n      &#x3C;div class=\"chat-avatar-wrap\">\n        &#x3C;img class=\"chat-avatar\" src=\"\"/>\n      &#x3C;/div>\n      &#x3C;div class=\"chat-info\">\n        &#x3C;div class=\"chat-user\">\n          &#x3C;span class=\"chat-name\">提案笙&#x3C;/span>\n          &#x3C;span class=\"chat-time\">9月30日 21:47&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div class=\"chat-text\">\n          &#x3C;p>什么秘密，我觉得你现在跟我说什么都没有意义&#x3C;/p>\n        &#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/body>\n</code></pre>\n<p>感受最深的修改在几个地方：</p>\n<ul>\n<li>选择器</li>\n<li>命名</li>\n<li>一些很好用但是不熟悉的属性direction，margin-inline-start， margin-inline-end</li>\n</ul>\n<ol>\n<li>\n<p>选择器</p>\n<p>​\t在此之前我的习惯是用class和id选择器，但是会发现这里用了属性选择器，属性选择器 [data-is-self] .chat-item-info 写定制样式，而不是像我原来写了left，right两个class，或者可能有人会这样写.chat-item-info. right 。使用属性选择器的好处是含义更清晰，写法也更优雅了，靠左和靠右的消息本质上都是消息，所以为了区别样式拆为两个class，并不如只通过属性不同去定制样式更优雅可读性好。</p>\n</li>\n</ol>\n<p>   这里补充提一个我提的问题</p>\n<p>   Q：张老师平时选择器您一般怎么选择使用的呢？</p>\n<p>   A：一般就是class和id加上属性，通常情况下是不推荐使用多个选择器互相选择的，性能不是关键问题只要不是用了很多的选择器，在为DOMtree匹配样式的时候，选择器过多这个造成性能问题都可以忽略不计，关键是css的特殊性计算规则和层叠规则，会让选择器过多的样式很难被覆盖，然后代码就会越写越乱（原话可能不是这样的，我是根据我的理解回答的，最终解释权归张老师😂）</p>\n<ol start=\"2\">\n<li>\n<p>命名</p>\n<p>​\t当项目很大时，我会为样式命名混乱头疼，还会为样式互相覆盖没有章法越写越乱越写越多而头疼，下面的几种方式是我使用过的几种方式，在这里小结一下他们的区别与用法。</p>\n</li>\n</ol>\n<p>   <strong>命名空间：</strong></p>\n<p>   ​\t最简单的避免样式覆盖和令代码清晰易懂的命名class，用短横线加上一个命名空间比如上面的chat</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<p>   <strong>css模块化 与 scss ：</strong></p>\n<p>   ​\t使用scss最常用的功能之一，应该有嵌套写法，这种写法会让样式的层叠关系比较清晰，但是这也会造成一个问题，就是嵌套层数多了以后，相当于选择器层级变多了，虽然可以防止样式被污染或污染到其他的样式，但是想要在@media或者一些操作下去覆盖之前的样式也会更难</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<p>   <strong>Atomic CSS：</strong></p>\n<p>   ​\t首先推荐一下atomic css（可以看看material UI和Github的primer然后你就懂什么是atomic css了）使用它有很多好处，不用担心命名，样式是收敛的十分好管理，打开控制台会发现使用atomic不用去选中元素看样式，所有的class一目了然，变化也一目了然。但是atomic css通常会受到inline style反对者的抨击，觉得这和把样式写在标签上没有区别，说的不是没有道理，但是我认为还是有区别的。</p>\n<p>   ​\t使用atomic我认为应该不是说要严格的完全的使用，像GitHub也是存在部分的定制样式的，只是重复率非常高的比如只是想让父元素display：flex，你可以直接通过给父元素添加叫flex的class而不是在绞尽脑汁为这个节点取一个例如xxx-wrap，然后在css文件中写display，或者妥协的写一个丑陋的inline style然后debug的时候完全忘了这个inline style。我的想法是这是一种inline和独立样式的折中吧（好像扯远了，不过你用一次应该就会上瘾了，因为可以把注意力更多的放在编码上：）。不过团队自己实现一套好用的atomic的样式并不容易，因为团队里面每个人的习惯都不一样，如何符合大家的使用习惯，最大程度的兼容所有的项目和设计师的设计，而不是每写一个都去查文档找命名就十分重要了。atomic的用法最适合用于组件化的开发，如果单独为组件定制样式，修改的时候很容易牵一发而动全身。</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<ol start=\"3\">\n<li>\n<p>direction这个属性</p>\n<p>​\t这个属性兼容挺好的（详情可以参考张老师的博客）最后提一下的原因是，写的时候会发现不了解direction属性其实很难在左右两边两种消息形式使用同一模块顺序（仔细观察时间和用户名的顺序就会发现也是反的），那么用这个这属性就可以在保持模块顺序，减少定制化的代码</p>\n</li>\n</ol>\n<h1>其他</h1>\n<p>这是一些我认为的让css更好控制更具有全局或局部感的好用法</p>\n<ul>\n<li>\n<p>css变量与css函数</p>\n<p>不需要预编译就可以使用变量，用于控制值相同的属性变化或一次性修改这些属性的值</p>\n</li>\n<li>\n<p>currentColor</p>\n<p>让图标与文字保持相同的颜色</p>\n</li>\n<li>\n<p>rem，em， ch， vh，vm， %多种单位的根据场景不同的使用</p>\n<p>比如移动端rem会让字体间距自适应就类似于小程序中的rpx，ch，em会用在需要等宽字体的情况比如倒计时...</p>\n</li>\n</ul>\n<h1>总结</h1>\n<p>​\t做项目的时候虽然表面上功能效果实现就好，但是当我要去封装个组件或者去思考布局和样式如何安排的时候我会思考很久，因为不熟悉上述提到的一些概念用法还有一些我尚未学习到的概念用法，所以今天整理出来，后面也会多思考来完善直到自己有一套自己认可的熟悉的布局和书写样式的方法</p>","frontmatter":{"path":"/develop/something-about-css"}},"next":{"html":"<blockquote>\n<p>这篇文章就是经过了一段时间的学习留下的一些零碎的想法，大部分是实习后的感悟</p>\n</blockquote>\n<p>[TOC]</p>\n<h4>1. 纯nodejs（没有用任何的框架）搭建一个类似于博客的服务，去理解框架的意义</h4>\n<p>​\t在vue ，react流行之下，express这种web服务框架都已经用的很少了，为什么要用nodejs写一个框架我在完成这个导师布置的任务的时候有些问题请教了周边的同学她们都这么反问我😂，但是写完会发现这绝对是有意义的，</p>\n<p>​\t多去思考工具解决了什么问题怎么来的？比如说框架，又比如说异步解决的方案，这样在选用的时候会更得心应手而不是盲目跟着热度走</p>\n<h4>2. 学习了代码规范</h4>\n<p>​\t真的会用Eslint吗，在实习期间我做了个不太成功的分享关于prettier</p>\n<h4>3. Github成为了我的信仰网站，我copy了他的某个页面作为布局练习，何为信仰网站？</h4>\n<p>​\t所谓信仰网站就是当你不知道如何去实现一个功能的时候，以这个网站的实现为参考，比如说浏览器的form表单只支持GET和POST，当你需要PUT，DELETE如何实现，又比如csrf，github的实现方式</p>\n<h4>4. 学会看文档和关键词查询</h4>\n<p>​\t这种技能很重要，记不住但是留一个印象能够以最快的速度找到问题的解决方案，不要沉迷于文档而是在时间中真正的掌握实用的方法，</p>\n<h4>5. 学会规划自己的时间，学会排优先级</h4>\n<p>​\t听过一个时间规划的分享，重要紧急，重要不紧急，如何合理的安排需求和自我学习的时间很重要，</p>\n<h4>6. 一定要系统的看书</h4>\n<p>​\t我刚开始就是通过网上的各式教程学习的，但是在系统的开始看书后，发现真的不一样，</p>\n<h4>7. js和css和html，大学基础课真的是基础一定要好好学</h4>\n<p>​\tVue，React已经提供了良好封装，熟悉模版其实，似乎不用过于熟悉js也能写，但是慢慢就会发现瓶颈很很多bug不明所以，</p>\n<h4>8. 学习设计师的工具，至少要回自己取色切图，”选修“了公司的c4d课</h4>\n<h4>9. 学会做小结，及时反馈与分享</h4>\n<p>​\t我不太会写文章，而且我接触前端的时间也不长，很多知识都是不断的推倒重建，我不知道我脑子里觉得有意义的东西是否值得写成文章，或者说我讲的东西是否值得拿出来分享，分享的东西是不是讲的有根本性的错误，讲的到底好不好，一系列的顾虑导致我这方面一直做的不好，所以逼迫自己走出舒适区才有了现在这个博客，强迫自己去输出，不管对不对好不好，输出的过程中相当于把自己的脑子捋顺了一遍</p>\n<h4>10.学的时候要脚踏实地不要浮躁，多看看优质代码比自己闷头写一大串学到的更多</h4>\n<p>​\t能不能实现固然重要，但是</p>\n<h4>11.刚开始学习的时候我常犯的错误</h4>\n<ul>\n<li>没有处理异常</li>\n<li></li>\n</ul>","frontmatter":{"path":"/develop/frontend-develop-jottings"}}}}