{"data":{"markdownRemark":{"html":"","frontmatter":{"id":10029,"type":"develop","title":"思考项目目录结构","author":"jasmine","digest":"推荐一下yeoman","create_date":"Mon May 06 2019 17:59:23 GMT+0800 (CST)","update_date":"Mon May 06 2019 17:59:23 GMT+0800 (CST)","reading_time":"6 MIN READ","timestamp":1557136763941,"path":"/develop/files-tree","image":"http://blog.minghuiyang1998.com/files-tree.jpg","tags":["yeoman"],"palette":{"Vibrant":[178,129,87],"DarkVibrant":[90.92571428571429,64.40571428571428,41.674285714285716],"LightVibrant":[213.3257142857143,186.8057142857143,164.0742857142857],"Muted":[131,106,95],"DarkMuted":[49,65,75],"LightMuted":[200,181,168]}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"","frontmatter":{"path":"/develop/develop-tools"}},"next":{"html":"<h2>写在前面</h2>\n<p>​\t“你认为学校学到的专业课知识有用吗？”，我以前从来不认为学校学到的东西有用，计算机组成原理计算机系统结构操作系统都好浪费时间，考试就背背书，但当我逐渐去深入了解一些前端该了解的知识的时候，我觉得还是很有用的，如果你是个计算机或者软件相关专业的学生，你一定要好好学习基础专业课。</p>\n<p>​\t我了解到浏览器工作原理看的是（<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\">https://developers.google.com/web/updates/2018/09/inside-browser-part1</a>），知乎和掘金上都有相关文章，我写这篇文章的目的是督促我整理一下所学，尝试把我看完这篇文章以后所认识到的浏览器工作原理学校的操作系统课程的进程线程的知识串一下，毕竟知识那么零碎= =，不去复习思考和整合永远都不知道有用。</p>\n<h2>一些概念</h2>\n<p><strong>进程</strong>：</p>\n<ul>\n<li>程序的执行，由程序和数据两部分组成</li>\n<li>资源分配的最小单位，</li>\n<li>可以创建其他进程，所以一个程序可以是多进程的</li>\n</ul>\n<p><strong>线程：</strong></p>\n<ul>\n<li>调度的最小单位，不拥有资源读取所在进程的内存和其他资源</li>\n<li>引入的原因是共享环境，环境切换代价小于进程，线程的出现是为了挖掘进程内部的并发度，提高并发度的好处在于短时间内可以有更多的事情被处理</li>\n</ul>\n<p><strong>CPU调度</strong>：</p>\n<ul>\n<li>调度程序从内存中就绪可执行的进程里选择一个，并分配cpu（进程调度的算法和进程的几个状态这里就不赘述啦）</li>\n</ul>\n<p><strong>GPU：</strong></p>\n<ul>\n<li>多用于图形处理，用于快速渲染与平滑交互</li>\n</ul>\n<p><strong>并发：</strong></p>\n<ul>\n<li>假装并行，当单核cpu运行时一次只能执行一个进程，并发切换一个进程只能执行一小段时间，让用户感觉很多事情在同时进行</li>\n</ul>\n<h2>浏览器的架构</h2>\n<p>​\t浏览器的架构可能是一个具有多个线程的独立进程，或者存在多个进程但是只有部分进程之间会进行 IPC 通信的结构。本文主要讲的是chrome他是多进程架构的。主要的进程有：</p>\n<ul>\n<li>\n<p>browser进程：包含UI线程，Network线程，主要处理浏览器图形界面，和网络访问等，我的理解是是一个控制进程</p>\n</li>\n<li>\n<p>render进程：每开一个tab都是一个新进程，主要处理这个tab的页面渲染</p>\n</li>\n<li>\n<p>GPU进程：绘制进程</p>\n<p>…(其他的待我后面了解一下再写上来，因为不了解还是不要随便说了：)</p>\n</li>\n</ul>\n<p><strong>为什么用多进程架构？</strong>:  概念里面提到进程之间是并发执行的，进程之间是相互独立的，如果某一个tab没有响应，CPU切换到其他进程去执行不会有影响，即一个tab crash了其他还能正常工作。如果采用的是单进程多线程的模式公共的进程出现了问题，所有的页面都会受到影响</p>\n<h2>chrome的一些special的点</h2>\n<ul>\n<li><strong>渲染进程独立</strong>：每个tab和iframe的渲染进程都是独立的，每个进程自己的私有内存空间（不禁联想到微信小程序的架构），所以能打开的tab数量是有限制的，限制会根据设备的内存和 CPU 功率动态调整，但当 Chrome 达到限制时，它会在一个新的进程中打开这个站点。</li>\n<li><strong>服务化</strong>：在强大的硬件上运行的时候，会细化进程，比如可能会把browser进程中的network线程，UI线程，storage线程都拆为单独的进程，从而提高稳定性，如果唯一资源约束的设备上会整合到一个进程中，从而节省内存占用</li>\n</ul>\n<h2>进程间的通信</h2>\n<p>浏览器中的进程通信包括</p>\n<ul>\n<li>network处理render进程的网络请求</li>\n<li>network在请求数据之前查找render的worker进程（service worker），没有缓存才会开始网络请求</li>\n<li>render将raste后的帧传递给GPU进程进行渲染</li>\n<li>......</li>\n</ul>\n<p>进程通信的方式有:</p>\n<ul>\n<li>\n<p>共享存储区（内存的用户区，进程在创建的时候先找到可用内存建立PCB（系统区），再创建其他部分（用户区））</p>\n</li>\n<li>\n<p>管道</p>\n</li>\n<li>\n<p>消息缓冲</p>\n<p>......</p>\n</li>\n</ul>\n<h2>小结</h2>\n<p>​\t虽然不去了解这些东西，还是可以做好开发，毕竟高级的抽象屏蔽了底层的操作，但是去理解一下这些原理的东西，写代码的时候会有更得心应手恍然大悟的感觉不是吗：）</p>","frontmatter":{"path":"/develop/browser-OS"}}}}