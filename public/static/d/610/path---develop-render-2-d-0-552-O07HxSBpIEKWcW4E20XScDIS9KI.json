{"data":{"markdownRemark":{"html":"","frontmatter":{"id":10034,"type":"develop","title":"从输入url到显示页面","author":"jasmine","digest":"从输入url到显示出页面发生了什么，会涉及到浏览器的进程控制，缓存的查找，DNS解析，网络请求的过程，返回html浏览器的解析过程, js引擎对对代码解析执行过程（这个部分还有spa的解析过程的不同, 但这部分应该会放到web渲染方式的初步了解这一部分），这是很长的一系列知识点，是的我又来串知识点了：）","create_date":"Sat Apr 13 2019 09:36:35 GMT+0800 (CST)","update_date":"Sat Apr 13 2019 09:36:35 GMT+0800 (CST)","reading_time":"6 MIN READ","path":"/develop/render","image":"http://blog.minghuiyang1998.com/render.jpg","tags":["cache","browser"],"palette":{"Vibrant":[67,153,185],"DarkVibrant":[11,85,81],"LightVibrant":[157.6547619047619,202.90714285714282,219.74523809523808],"Muted":[55,101,109],"DarkMuted":[42,84,91],"LightMuted":[196,220,212]}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<blockquote>\n<p>​\tcss真的是很有趣和神奇的东西，如果足够熟悉所有的属性和使用场景，而不只是常用的那几个比如张老师，可以用优雅的代码创造很神奇的效果。刚入门如我刚开始学习css的时候，看了两本书《css权威指南》，张老师的《css世界》（这本其实还没看完，其实内容真的很好，但是更多的与实践相关，所以入门读起来可能真的会比较困难）关于样式最开始就是能实现就好，但是发现当页面越来越复杂，内容越来越多的时候样式不断叠加，内容越来越乱很难维护，自己写着写着就想重写全部了😂。这篇文章主要小结一个css小测和一些一段时间以来的小思考。</p>\n</blockquote>\n<h1>题目</h1>\n<p>实现一个类似于微信聊天界面的布局，兼容移动端即可（<a href=\"https://github.com/zhangxinxu/quiz/issues/16\">小测地址</a>）</p>\n<p><img src=\"http://blog.minghuiyang1998.com/css4.png\" alt=\"css4\"></p>\n<h1>思考</h1>\n<p>这个题目的关键点在于了解一下direction这个属性，我还学到了更多的东西，下面是经过我修改的代码：</p>\n<pre><code class=\"language-html\">&#x3C;head>\n  &#x3C;style>\n    body {\n      margin: 0;\n    }\n\n    p {\n      margin: 0;\n    }\n\n    html {\n      font-size: 16px;\n    }\n\n    @media screen and (min-width: 375px) {\n      html {\n        /* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */\n        font-size: calc(100% + 2 * (100vw - 375px) / 39);\n        font-size: calc(16px + 2 * (100vw - 375px) / 39);\n      }\n    }\n\n    @media screen and (min-width: 414px) {\n      html {\n        /* 414px-1000px每100像素宽字体增加1px(18px-22px) */\n        font-size: calc(112.5% + 4 * (100vw - 414px) / 586);\n        font-size: calc(18px + 4 * (100vw - 414px) / 586);\n      }\n    }\n\n    @media screen and (min-width: 600px) {\n      html {\n        /* 600px-1000px每100像素宽字体增加1px(20px-24px) */\n        font-size: calc(125% + 4 * (100vw - 600px) / 400);\n        font-size: calc(20px + 4 * (100vw - 600px) / 400);\n      }\n    }\n\n    @media screen and (min-width: 1000px) {\n      html {\n        /* 1000px往后是每100像素0.5px增加 */\n        font-size: calc(137.5% + 6 * (100vw - 1000px) / 1000);\n        font-size: calc(22px + 6 * (100vw - 1000px) / 1000);\n      }\n    }\n\n    .container {\n      padding: 0 1rem;\n    }\n\n    .chat-item {\n      display: flex;\n      padding: 0.625rem 0;\n    }\n\n    .chat-user {\n      color: #808080;\n      font-size: 1rem;\n      margin-bottom: 0.5rem;\n    }\n\n    .chat-name,\n    .chat-time {\n      display: inline-block;\n    }\n\n    .chat-avatar-wrap {\n      display: inline-block;\n    }\n\n    .chat-avatar {\n      border-radius: 50%;\n      width: 3.75rem;\n      height: 3.75rem;\n      margin-inline-end: 0.8rem;\n    }\n\n    .chat-text {\n      border-radius: 0.75rem;\n      position: relative;\n      padding: 0.75rem 0.625rem;\n\n      background-color: #eee;\n      border-color: #eee;\n      color: #3b3f47;\n    }\n\n    .chat-text p {\n      text-align: left;\n    }\n\n    .chat-text::before {\n      content: \"\";\n      display: inline-block;\n      position: absolute;\n      z-index: -1;\n      width: 2rem;\n      height: 1.2rem;\n      top: -0.1rem;\n      margin-inline-start: -3.2rem;\n      border-top-right-radius: 40% 50%;\n      border-top-left-radius: 40% 50%;\n      border-left: 0.6em solid;\n      border-right: 0.6em solid;\n      border-color: inherit;\n    }\n\n    [data-is-self].chat-item {\n      direction: rtl;\n    }\n\n    [data-is-self] .chat-text {\n      background-color: #00beff;\n      border-color: #00beff;\n      color: #ffffff;\n    }\n  &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n  &#x3C;div class=\"container\">\n    &#x3C;div class=\"chat-item\">\n      &#x3C;div class=\"chat-avatar-wrap\">\n        &#x3C;img class=\"chat-avatar\" src=\"\"/>\n      &#x3C;/div>\n      &#x3C;div class=\"chat-info\">\n        &#x3C;div class=\"chat-user\">\n          &#x3C;span class=\"chat-name\">提案笙&#x3C;/span>\n          &#x3C;span class=\"chat-time\">9月30日 21:47&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div class=\"chat-text\">\n          &#x3C;p>什么秘密，我觉得你现在跟我说什么都没有意义&#x3C;/p>\n        &#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n\n    &#x3C;div class=\"chat-item\" data-is-self>\n      &#x3C;div class=\"chat-avatar-wrap\">\n        &#x3C;img class=\"chat-avatar\" src=\"\"/>\n      &#x3C;/div>\n      &#x3C;div class=\"chat-info\">\n        &#x3C;div class=\"chat-user\">\n          &#x3C;span class=\"chat-name\">提案笙&#x3C;/span>\n          &#x3C;span class=\"chat-time\">9月30日 21:47&#x3C;/span>\n        &#x3C;/div>\n        &#x3C;div class=\"chat-text\">\n          &#x3C;p>什么秘密，我觉得你现在跟我说什么都没有意义&#x3C;/p>\n        &#x3C;/div>\n      &#x3C;/div>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/body>\n</code></pre>\n<p>感受最深的修改在几个地方：</p>\n<ul>\n<li>选择器</li>\n<li>命名</li>\n<li>一些很好用但是不熟悉的属性direction，margin-inline-start， margin-inline-end</li>\n</ul>\n<ol>\n<li>\n<p>选择器</p>\n<p>​\t在此之前我的习惯是用class和id选择器，但是会发现这里用了属性选择器，属性选择器 [data-is-self] .chat-item-info 写定制样式，而不是像我原来写了left，right两个class，或者可能有人会这样写.chat-item-info. right 。使用属性选择器的好处是含义更清晰，写法也更优雅了，靠左和靠右的消息本质上都是消息，所以为了区别样式拆为两个class，并不如只通过属性不同去定制样式更优雅可读性好。</p>\n</li>\n</ol>\n<p>   这里补充提一个我提的问题</p>\n<p>   Q：张老师平时选择器您一般怎么选择使用的呢？</p>\n<p>   A：一般就是class和id加上属性，通常情况下是不推荐使用多个选择器互相选择的，性能不是关键问题只要不是用了很多的选择器，在为DOMtree匹配样式的时候，选择器过多这个造成性能问题都可以忽略不计，关键是css的特殊性计算规则和层叠规则，会让选择器过多的样式很难被覆盖，然后代码就会越写越乱（原话可能不是这样的，我是根据我的理解回答的，最终解释权归张老师😂）</p>\n<ol start=\"2\">\n<li>\n<p>命名</p>\n<p>​\t当项目很大时，我会为样式命名混乱头疼，还会为样式互相覆盖没有章法越写越乱越写越多而头疼，下面的几种方式是我使用过的几种方式，在这里小结一下他们的区别与用法。</p>\n</li>\n</ol>\n<p>   <strong>命名空间：</strong></p>\n<p>   ​\t最简单的避免样式覆盖和令代码清晰易懂的命名class，用短横线加上一个命名空间比如上面的chat</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<p>   <strong>css模块化 与 scss ：</strong></p>\n<p>   ​\t使用scss最常用的功能之一，应该有嵌套写法，这种写法会让样式的层叠关系比较清晰，但是这也会造成一个问题，就是嵌套层数多了以后，相当于选择器层级变多了，虽然可以防止样式被污染或污染到其他的样式，但是想要在@media或者一些操作下去覆盖之前的样式也会更难</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<p>   <strong>Atomic CSS：</strong></p>\n<p>   ​\t首先推荐一下atomic css（可以看看material UI和Github的primer然后你就懂什么是atomic css了）使用它有很多好处，不用担心命名，样式是收敛的十分好管理，打开控制台会发现使用atomic不用去选中元素看样式，所有的class一目了然，变化也一目了然。但是atomic css通常会受到inline style反对者的抨击，觉得这和把样式写在标签上没有区别，说的不是没有道理，但是我认为还是有区别的。</p>\n<p>   ​\t使用atomic我认为应该不是说要严格的完全的使用，像GitHub也是存在部分的定制样式的，只是重复率非常高的比如只是想让父元素display：flex，你可以直接通过给父元素添加叫flex的class而不是在绞尽脑汁为这个节点取一个例如xxx-wrap，然后在css文件中写display，或者妥协的写一个丑陋的inline style然后debug的时候完全忘了这个inline style。我的想法是这是一种inline和独立样式的折中吧（好像扯远了，不过你用一次应该就会上瘾了，因为可以把注意力更多的放在编码上：）。不过团队自己实现一套好用的atomic的样式并不容易，因为团队里面每个人的习惯都不一样，如何符合大家的使用习惯，最大程度的兼容所有的项目和设计师的设计，而不是每写一个都去查文档找命名就十分重要了。atomic的用法最适合用于组件化的开发，如果单独为组件定制样式，修改的时候很容易牵一发而动全身。</p>\n<p>   优点：</p>\n<p>   缺点：</p>\n<ol start=\"3\">\n<li>\n<p>direction这个属性</p>\n<p>​\t这个属性兼容挺好的（详情可以参考张老师的博客）最后提一下的原因是，写的时候会发现不了解direction属性其实很难在左右两边两种消息形式使用同一模块顺序（仔细观察时间和用户名的顺序就会发现也是反的），那么用这个这属性就可以在保持模块顺序，减少定制化的代码</p>\n</li>\n</ol>\n<h1>其他</h1>\n<p>这是一些我认为的让css更好控制更具有全局或局部感的好用法</p>\n<ul>\n<li>\n<p>css变量与css函数</p>\n<p>不需要预编译就可以使用变量，用于控制值相同的属性变化或一次性修改这些属性的值</p>\n</li>\n<li>\n<p>currentColor</p>\n<p>让图标与文字保持相同的颜色</p>\n</li>\n<li>\n<p>rem，em， ch， vh，vm， %多种单位的根据场景不同的使用</p>\n<p>比如移动端rem会让字体间距自适应就类似于小程序中的rpx，ch，em会用在需要等宽字体的情况比如倒计时...</p>\n</li>\n</ul>\n<h1>总结</h1>\n<p>​\t做项目的时候虽然表面上功能效果实现就好，但是当我要去封装个组件或者去思考布局和样式如何安排的时候我会思考很久，因为不熟悉上述提到的一些概念用法还有一些我尚未学习到的概念用法，所以今天整理出来，后面也会多思考来完善直到自己有一套自己认可的熟悉的布局和书写样式的方法</p>","frontmatter":{"path":"/develop/something-about-css"}},"next":{"html":"","frontmatter":{"path":"/develop/html-form"}}}}